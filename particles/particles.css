canvas {
    display:block;
}
body {
    cursor:crosshair;
}
#visor {
	font-family: "Courier New", "Lucida Console", monospace;
	z-index: 2;
	color:lightblue;
    position: absolute;
	display:block;
}
.unselectable {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/*
good point materials
nice functions/space










/* check list
look:
color,//done
size,//done
shape,//eh...
transparency,
change with distance, 


trails, - use curves
links, - use lines of lines of lines????
function,
behavior



metrics,
surfaces and volumes,
projections, functions, 
domains, codomains


symetry
rotation 
mirror,
fractal


set theory


consider dimensions:
2 to 2
3 to 2


1 to 3 space filling  
1 to 2 space filling
2 to 3 surface       - needs 2d grid sure a line of lines

3 to 3               - 3d grid? sure a line of lines of lines
3 to 1 projection
3 to 2 projection



construct then function to the rest
set of points in 2d -> set of points in 3d -> set of points in 3d

base set, some maps, point material




class particle group{
    let the_the_set_of_points = [];
    behavior = function that affects runs through each point()
}


class point group {
    dimenstions = n;
    points = [[],[],[]];
    behavior = function that runs through points
}

set of points - each point has n dimensions
each set of points also has a projection to 3d

funtions
projections










GPU stuff:
vertex shader thing is a projection function
this will not handle fractals/behavior/symmetries/mirrors
frag shader handles look

All particles have:
-vertex shader
-frag shader
-set of data
-dimension of data
-behavior that updates data (sometimes)

*/